<?xml version="1.0" encoding="UTF-8"?>
<server description="new server">

    <!-- Enable features -->
    <featureManager>
        <feature>javaee-8.0</feature>
    </featureManager>

    <!-- This template enables security. To get the full use of all the capabilities, a keystore and user registry are required. -->

    <!-- For the keystore, default keys are generated and stored in a keystore. To provide the keystore password, generate an
         encoded password using bin/securityUtility encode and add it below in the password attribute of the keyStore element.
         Then uncomment the keyStore element. -->
    <!--
    <keyStore password=""/>
    -->

    <!--For a user registry configuration, configure your user registry. For example, configure a basic user registry using the
        basicRegistry element. Specify your own user name below in the name attribute of the user element. For the password,
        generate an encoded password using bin/securityUtility encode and add it in the password attribute of the user element.
        Then uncomment the user element. -->
    <basicRegistry id="basic" realm="BasicRealm">
        <user name="bob" password="bobpwd"/>
    </basicRegistry>

    <!-- batch job requires a batchAdmin role to start -->
    <!-- https://www.ibm.com/docs/en/was-liberty/nd?topic=liberty-securing-batch-environment -->
    <authorization-roles id="com.ibm.ws.batch">
        <security-role name="batchAdmin">
<!--            <user name="bob"/>-->
            <special-subject type="EVERYONE" />
        </security-role>
    </authorization-roles>

    <webApplication name="cargo-tracker" location="cargo-tracker.war"  contextRoot="/cargo-tracker">
        <application-bnd>
            <security-role name="batchAdmin">
                <user name="bob" />
                <run-as userid="bob"/>
            </security-role>
        </application-bnd>
    </webApplication>

    <httpSession idLength="49" />
    <!-- To access this server from a remote client add a host attribute to the following element, e.g. host="*" -->
    <httpEndpoint id="defaultHttpEndpoint"
                  httpPort="9080"
                  httpsPort="9443" />

    <!-- Automatically expand WAR files and EAR files -->
    <applicationManager autoExpand="true"/>

    <messagingEngine>
        <queue id="MisdirectedCargoQueue"/>
        <queue id="CargoHandledQueue"/>
        <queue id="RejectedRegistrationAttemptsQueue"/>
        <queue id="HandlingEventRegistrationAttemptQueue"/>
        <queue id="DeliveredCargoQueue"/>
    </messagingEngine>

    <jmsQueue id="jms/MisdirectedCargoQueue" jndiName="jms/MisdirectedCargoQueue">
        <properties.wasJms queueName="MisdirectedCargoQueue"/>
    </jmsQueue>
    <jmsQueue id="jms/CargoHandledQueue" jndiName="jms/CargoHandledQueue">
        <properties.wasJms queueName="CargoHandledQueue"/>
    </jmsQueue>
    <jmsQueue id="jms/RejectedRegistrationAttemptsQueue" jndiName="jms/RejectedRegistrationAttemptsQueue">
        <properties.wasJms queueName="RejectedRegistrationAttemptsQueue"/>
    </jmsQueue>
    <jmsQueue id="jms/HandlingEventRegistrationAttemptQueue" jndiName="jms/HandlingEventRegistrationAttemptQueue">
        <properties.wasJms queueName="HandlingEventRegistrationAttemptQueue"/>
    </jmsQueue>
    <jmsQueue id="jms/DeliveredCargoQueue" jndiName="jms/DeliveredCargoQueue">
        <properties.wasJms queueName="DeliveredCargoQueue"/>
    </jmsQueue>

    <jmsActivationSpec id="cargo-tracker/MisdirectedCargoConsumer">
        <properties.wasJms
                destinationRef="jms/MisdirectedCargoQueue"
                destinationType="javax.jms.Queue"
        />
    </jmsActivationSpec>
    <jmsActivationSpec id="cargo-tracker/CargoHandledConsumer">
        <properties.wasJms
                destinationRef="jms/CargoHandledQueue"
                destinationType="javax.jms.Queue"
        />
    </jmsActivationSpec>
    <jmsActivationSpec id="cargo-tracker/RejectedRegistrationAttemptsConsumer">
        <properties.wasJms
                destinationRef="jms/RejectedRegistrationAttemptsQueue"
                destinationType="javax.jms.Queue"
        />
    </jmsActivationSpec>
    <jmsActivationSpec id="cargo-tracker/HandlingEventRegistrationAttemptConsumer">
        <properties.wasJms
                destinationRef="jms/HandlingEventRegistrationAttemptQueue"
                destinationType="javax.jms.Queue"
        />
    </jmsActivationSpec>
    <jmsActivationSpec id="cargo-tracker/DeliveredCargoConsumer">
        <properties.wasJms
                destinationRef="jms/DeliveredCargoQueue"
                destinationType="javax.jms.Queue"
        />
    </jmsActivationSpec>

    <!-- Datasource Configuration -->
    <!-- remove jndiName="" to serve java:comp/DefaultDataSource for Java EE 7 or above -->
    <dataSource id="DefaultDataSource" jndiName="jdbc/CargoTrackerDatabase">
        <jdbcDriver libraryRef="PostgresLib"/>
        <properties.postgresql databaseName="cargotracker"
                               user="user" password="password"
                               serverName="localhost"
                               portNumber="5432"/>
    </dataSource>

    <!-- Postgres Jdbc Driver Lib -->
    <library id="PostgresLib">
        <fileset dir="${shared.resource.dir}" includes="postgresql*.jar"/>
    </library>

</server>